const axios = require('axios');

const sleep = ms => new Promise(resolve => setTimeout(resolve, ms));

function getTimestampAtVietnamHour(hour = 7) {
    const now = new Date();

    // Tr·ª´ ƒëi 1 ng√†y ƒë·ªÉ l·∫•y ng√†y h√¥m tr∆∞·ªõc theo gi·ªù Vi·ªát Nam
    now.setDate(now.getDate() );

    const year = now.getFullYear();
    const month = now.getMonth(); // L∆∞u √Ω: th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
    const date = now.getDate();

    // T·∫°o Date t·∫°i m·ªëc gi·ªù UTC t∆∞∆°ng ·ª©ng v·ªõi gi·ªù VN
    const dateUTC = new Date(Date.UTC(year, month, date, hour - 7, 0, 0));

    return Math.floor(dateUTC.getTime() / 1000);
}




const { API_KEY } = require('../config');

const fetchLongShortRatioData = async (symbol, retries = 3) => {
    // const now = new Date(); // L·∫•y th·ªùi gian hi·ªán t·∫°i
    // const nowTimestamp = Math.floor(now.getTime() / 1000); // Unix timestamp hi·ªán t·∫°i
    // const from = Math.floor(nowTimestamp / 3600) * 3600; // L√†m tr√≤n v·ªÅ ƒë·∫ßu gi·ªù
    // const to = from; // Th·ªùi gian hi·ªán t·∫°i

    const from = getTimestampAtVietnamHour(7); // timestamp c·ªßa 07:00 s√°ng h√¥m nay theo gi·ªù VN
    const to = from; // Th·ªùi gian hi·ªán t·∫°i

    // console.log("üì¶ from:Long", from, "| to:", to);

    const url = "https://api.coinalyze.net/v1/long-short-ratio-history";

    for (let attempt = 0; attempt < retries; attempt++) {
        try {
            const response = await axios.get(url, {
                params: { symbols: symbol, interval: "daily", from, to, api_key: API_KEY }
            });

            const item = response.data.find(entry => entry.symbol === symbol);
            const latest = item?.history?.at(-1);
            if (!latest) return null;

            const { t, r, l, s } = latest;
            return { timestamp: t, ratio: r, longRatio: l, shortRatio: s };

        } catch (err) {
            if (err.response?.status === 429) {
                console.warn(`‚ùå L·ªói fetchLongShortRatioData (429): ƒê·ª£i 30s r·ªìi th·ª≠ l·∫°i (${attempt + 1}/${retries})...`);
                await sleep(30000); // ƒê·ª£i 30 gi√¢y
            } else {
                console.error(`‚ùå L·ªói fetchLongShortRatioData: ${err.message}`);
                return null;
            }
        }
    }

    console.error(`‚ùå fetchLongShortRatioData th·∫•t b·∫°i sau ${retries} l·∫ßn th·ª≠.`);
    return null;
};

module.exports = fetchLongShortRatioData;
